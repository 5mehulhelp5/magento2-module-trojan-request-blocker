<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2024 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\TrojanRequestBlocker\Service;

use Magento\Framework\App\Filesystem\DirectoryList;
use Magento\Framework\Exception\FileSystemException;

/**
 * DocBlock for AdditionalPatternsLoader class.
 */
class PatternsRetriever
{
    private const ADDITIONAL_PATTERNS_FILE = '.terms_blacklist';

    /**
     * @var DirectoryList
     */
    private DirectoryList $directoryList;

    /**
     * @var array
     */
    private array $patterns;

    /**
     * @var bool
     */
    private bool $isLoadedAdditionPatterns = false;

    /**
     * @param DirectoryList $directoryList
     * @param array $patterns
     */
    public function __construct(
        DirectoryList $directoryList,
        array $patterns = []
    ) {
        $this->directoryList = $directoryList;
        $this->patterns = $patterns;
    }

    /**
     * DocBlock for method.
     *
     * @return array
     */
    public function getPatterns(): array
    {
        $this->loadAdditionalPatterns();
        return (array) $this->patterns;
    }

    /**
     * DocBlock for method.
     *
     * @return void
     */
    private function loadAdditionalPatterns(): void
    {
        if ($this->isLoadedAdditionPatterns) {
            return;
        }
        try {
            $varDirectory = $this->directoryList->getPath(DirectoryList::VAR_DIR);
        } catch (FileSystemException $e) {
            return;
        }
        $termsBlacklist = $varDirectory . DIRECTORY_SEPARATOR . self::ADDITIONAL_PATTERNS_FILE;
        if (file_exists($termsBlacklist) && is_readable($termsBlacklist)) {
            $content = explode(PHP_EOL, file_get_contents($termsBlacklist));
            $content = array_filter($content);
            array_map(function (string $term) use (&$patterns) {
                $this->patterns[] = $term;
            }, $content);
            $this->patterns = array_unique($this->patterns);
            $this->isLoadedAdditionPatterns = true;
        }
    }
}
